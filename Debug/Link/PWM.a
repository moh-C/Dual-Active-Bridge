;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Global Variables
;int topValueToggle = 0;
;
;void setupTimer(int freq)
; 0000 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009     int ICR_Value = 8000000 / 2 / 8 / freq - 1;
; 0000 000A     topValueToggle = ICR_Value + 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	freq -> Y+2
;	ICR_Value -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 000B 
; 0000 000C     // Stop the counter
; 0000 000D     TCCR1B = 0x18;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 000E 
; 0000 000F     // in mode 12 CTC
; 0000 0010     TCCR1A = 0x50;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0011 
; 0000 0012     // Change frequency
; 0000 0013     ICR1H = (int) ICR_Value / 256;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0014     ICR1L = (int) ICR_Value % 256;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0015 
; 0000 0016     // Reset the counter
; 0000 0017     TCNT1=0x0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0018 
; 0000 0019     // Start the counter and prescaler
; 0000 001A     TCCR1B |= 2;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001B 
; 0000 001C     // No phase shift for the first one
; 0000 001D     OCR1A = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001E }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void setPhase(int phase)
; 0000 0021 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0022     int result = 0;
; 0000 0023 
; 0000 0024     // int first_ = topValueToggle / 2;
; 0000 0025     // int second_ = topValueToggle / 2 - 1;
; 0000 0026 
; 0000 0027     // int result = (first_ * phase) / 180;
; 0000 0028     // result = result + ((second_ * phase) / 180);
; 0000 0029 
; 0000 002A     topValueToggle = topValueToggle - 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	phase -> Y+2
;	result -> R16,R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002B     result = topValueToggle * phase / 180;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 002C     OCR1B = (int) result;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002D }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;
;void main(void)
; 0000 0031 {
;PCODE: $0000004E VOL: 0
; 0000 0032     int cnt = 0;
; 0000 0033     DDRD = 0xFF;
;	cnt -> R16,R17
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0034     setupTimer(5000);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0035     while (1)
;PCODE: $00000055 VOL: 0
; 0000 0036     {
; 0000 0037         for(cnt=0; cnt <= 180;)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0038         {
; 0000 0039             setPhase(cnt);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003A             cnt = cnt + 10;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003B             delay_ms(500);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003C         }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003D     }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003E }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
